buildscript {
    repositories { jcenter() }
    dependencies { classpath 'org.scaldingspoon.gradle:gradle-waroverlay-plugin:0.9.3' }
}

apply plugin: 'war'

import de.undercouch.gradle.tasks.download.Download
task download(type: Download) {
    src 'https://github.com/Netflix/asgard/releases/download/1.5.1/asgard.war'
    onlyIfNewer true
    dest new File(buildDir, 'asgard.war')
}

task unzipFile(dependsOn: download, type: Copy) {
    from zipTree(download.dest)
    include 'WEB-INF/web.xml'
    includeEmptyDirs = false
    into "$buildDir/unpackedWebXml"
}

def securityConstraint = """
        <security-constraint>
                <web-resource-collection>
                        <web-resource-name></web-resource-name>
                        <url-pattern>/*</url-pattern>
                        <http-method>DELETE</http-method>
                        <http-method>PUT</http-method>
                        <http-method>HEAD</http-method>
                        <http-method>OPTIONS</http-method>
                        <http-method>TRACE</http-method>
                        <http-method>POST</http-method>
                </web-resource-collection>
                <auth-constraint><role-name>asgard</role-name></auth-constraint>
        </security-constraint>
        <login-config>
            <auth-method>BASIC</auth-method><realm-name>asgard</realm-name>
        </login-config>
        """
task injectWebXml {
    dependsOn unzipFile
    doFirst {
        def webxml = new File(unzipFile.destinationDir, 'WEB-INF/web.xml')
        def content = webxml.text
        webxml.withWriter { out ->
            out << content.replace('</web-app>', "${securityConstraint}\n</web-app>")
        }
    }
}

war {
    dependsOn(injectWebXml)
    from(unzipFile)
}

apply plugin: 'waroverlay'
warOverlay {
    includeWarJars true
}

dependencies {
    runtime files(download.dest) {
        builtBy tasks.download
    }
}

// TODO tomcat_extra_opts: "-Darchaius.deployment.applicationId=asgard -Dnetflix.datacenter=cloud"
import org.apache.tools.ant.filters.*
ospackage {
    from(war) {
        into('/var/lib/tomcat7/webapps/')
        rename(/.*/, 'ROOT.war')
    }
    from(file('root')) {
        into('/')
        user = 'tomcat7'
        permissionGroup = 'tomcat7'

        def accountNumber = System.getenv('EC2_OWNER_ID')

        // It'd be nice to alert on this, but it seems like every run requires this
        //if (!accountNumber) {
        //    throw new GradleException("Please run eval \$(baseami/root/usr/local/bin/metadatavars) first")
        //}
        filter ReplaceTokens, tokens: [
                "ASGARD_PASSWORD": project.property("asgard.password"),
                "ACCOUNT_NUMBER": accountNumber
        ]
    }
    postInstall('mv /etc/tomcat7/tomcat-users.xml.asgard /etc/tomcat7/tomcat-users.xml')
    postInstall('echo "export CATALINA_OPTS=\\"\\$CATALINA_OPTS -DonlyRegions=us-west-2\\"" >> /usr/share/tomcat7/bin/setenv.sh')

    def eureka = System.getenv("EUREKA_ELB")
    if (eureka) {
        println "Provide Eureka Configuration for us-west-2"
        postInstall("echo 'eureka.regionsToServers = [(Region.US_WEST_2): \"${eureka}\"]' >> /usr/share/tomcat7/.asgard/Config.groovy")
    }
}
